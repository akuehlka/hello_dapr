version: "3"
services:
  
  nodeapp:
    build:
      context: ./node
    ports:
      - "50001:50001"  # Dapr instances communicate over gRPC so we need to expose the gRPC port
    depends_on:
      - redis
      - placement
    networks:
      - daprnet

  nodeapp-dapr:
    image: "daprio/daprd:edge"
    command: [
      "./daprd",
      "--app-id", "nodeapp",
      "--app-port", "3000",
      "--placement-host-address", "placement:50006",  # Dapr's placement service can be reach via the docker DNS entry
      "--dapr-grpc-port", "50001",
      "--components-path", "/components"
    ]
    depends_on:
      - nodeapp
    volumes:
      - "./components:/components"   # Mount our components folder for the runtime to use. The mounted location must match the --resources-path argument.
    network_mode: "service:nodeapp"
  
  pythonapp:
    build:
      context: ./python
    depends_on:
      - redis
      - placement
    networks:
      - daprnet

  pythonapp-dapr:
    image: "daprio/daprd:edge"
    command: [
      "./daprd",
      "--app-id", "pythonapp",
      "--placement-host-address", "placement:50006",  # Dapr's placement service can be reach via the docker DNS entry
      "--components-path", "/components"
    ]
    volumes:
      - "./components:/components"   # Mount our components folder for the runtime to use. The mounted location must match the --resources-path argument.
    depends_on:
      - pythonapp
    network_mode: "service:pythonapp"

  placement:
    image: "daprio/dapr"
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"  # Dapr's placement service can be reach via the docker DNS entry
    networks:
      - daprnet

  redis:
    image: "redis:alpine"
    ports:
      - "6380:6379"
    networks:
      - daprnet

  # curl:
  #   image: yauritux/busybox-curl
  #   networks:
  #     - daprnet
  #   command: ["tail", "-f", "/dev/null"]

  neo4j:
    image: neo4j:bullseye
    # container_name: "neo4j"
    volumes:
      - ./data/neo4j/data:/data
      - ./data/neo4j/var:/var/lib/neo4j/import
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_security_auth__minimum__password__length=4
      - NEO4J_AUTH=neo4j/1234
      # - NEO4J_PLUGINS=["apoc", "graph-data-science","n10s"]
      # - NEO4J_dbms_unmanaged__extension__classes=n10s.endpoint=/rdf
      # Comment these lines if you do not have the memory available
      # - NEO4J_dbms_memory_pagecache_size=4G
      # - NEO4j_dbms_memory_heap_initial__size=4G
      # - NEO4J_dbms_memory_heap_max__size=8G
    networks:
      - daprnet

    
networks:
  daprnet: 